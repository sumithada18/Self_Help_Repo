The Scenario:

Imagine you have a Pop-up Window in your application. This Pop-up Window has an "OK" Button.

What & Why (Initial Setup with shared_ptr):
The Pop-up Window "owns" its "OK" Button. It makes sense for the Pop-up to hold a shared_ptr to the OK Button. If the Pop-up is destroyed, the Button should go with it.
Now, when you click the "OK" Button, it needs to tell its parent Pop-up Window to do something (e.g., "close yourself" or "process this data"). So, the OK Button also needs a way to refer back to the Pop-up Window. If we also give the OK Button a shared_ptr to the Pop-up Window, we create a problem.

The Problem (Cyclic Dependency):
The Pop-up Window has a shared_ptr pointing to the OK Button (Pop-up -> Button).
The OK Button now also has a shared_ptr pointing back to the Pop-up Window (Button -> Pop-up).
This creates a cycle: Pop-up keeps Button alive, and Button keeps Pop-up alive.
When you try to close the Pop-up Window (e.g., by clicking "X" or the application tries to clean it up), the Pop-up's main reference count might go down, but the OK Button still holds a shared_ptr to it. So, the Pop-up can't be destroyed.
Similarly, the Pop-up holds a shared_ptr to the OK Button, so the Button can't be destroyed either.

Result: Neither the Pop-up nor the OK Button can ever be fully deleted from memory, even when they are no longer visible or needed. This is a memory leak.

The Solution (Using weak_ptr):
The Pop-up Window can still own the OK Button with a shared_ptr (Pop-up -> Button). This is fine.
However, for the OK Button to refer back to its parent Pop-up Window, we use a weak_ptr instead of a shared_ptr (Button --weak--> Pop-up).
A weak_ptr allows the OK Button to "observe" or "know about" the Pop-up Window without actually owning it or keeping it alive. It doesn't increase the Pop-up's reference count.
When the OK Button is clicked, it first tries to "lock" its weak_ptr to get a temporary shared_ptr to the Pop-up.

If the Pop-up still exists, the lock succeeds, and the Button can safely tell the Pop-up what to do.
If the Pop-up has already been destroyed (because nothing else is holding a shared_ptr to it), the lock will fail, and the Button knows the Pop-up is gone and it doesn't need to do anything.

Result: The cycle is broken. When the application is done with the Pop-up Window, its reference count (from shared_ptrs) can go to zero, and it gets properly destroyed, taking its OK Button (which it owns via shared_ptr) with it. No memory leak!
In short: The Pop-up owns its Button (shared_ptr). The Button needs to talk to the Pop-up but doesn't own it, so it uses a weak_ptr to avoid a "you keep me alive, I keep you alive" stalemate that leads to a memory leak.
