 Understanding of *char*
A char is an integer data type that is 1 byte (8 bits), providing 2^8 (256) unique bit patterns. Its primary job is to store characters, 
but it's fundamentally a small integer.

The C++ standard does not specify if a plain char is signed or unsigned; this is platform-dependent.

-> An unsigned char uses all 256 patterns to store numbers from 0 to 255.
-> A signed char splits the patterns to store numbers from -128 to 127.

Overflow happens when a value goes outside these ranges.

-> For unsigned char: Overflow is well-defined. The value predictably wraps around. 255 + 1 becomes 0. This can cause logical issues.
-> For signed char: Overflow triggers Undefined Behavior (UB). You must avoid this, as the result is unpredictable and dangerous.

Printing with std::cout:
The most unique aspect of char is how it's treated by output streams.
-> std::cout << my_char; will print the character symbol corresponding to the integer value (e.g., the value 65 prints as the character 'A').
-> std::cout << (int)my_char; is required to see the actual integer value stored in the variable.

Practical Rules:
-> Use a plain char for storing standard text characters.
-> Use an unsigned char when you need a small, non-negative integer from 0-255 or are working with raw binary data.
-> Use a signed char when you need a very small integer that could be negative.






Understanding of *int*
An int is typically 4 bytes (32 bits), which provides 2^32 unique bit patterns. How these patterns are used depends on whether the int is 
signed or unsigned.

-> An unsigned int uses all 2^32 patterns to store numbers from 0 to 4,294,967,295 (which is 2^32 - 1).
-> A signed int splits the patterns to store numbers from -2,147,483,648 to +2,147,483,647 (which is -2^31 to 2^31 - 1).

Overflow is what happens when a calculation's result falls outside these ranges. The consequences are critically different:
-> For unsigned int: Overflow is not a compiler error. The value predictably wraps around (modulo arithmetic). This is a well-defined behavior, but 
   it often creates a serious runtime logical issue because the result is mathematically incorrect.
-> For signed int: Overflow does not give a guaranteed error. It triggers Undefined Behavior (UB).
  - The Reason (Why it's UB): The C++ standard allows the compiler to assume that signed overflow will never happen. This lets the compiler perform 
    aggressive optimizations. Because of this assumption, when overflow does happen, the program is in an invalid state, and the result is completely 
    unpredictable—it might crash, corrupt data, or create a security vulnerability.

Practical Rules:
-> Use a signed int (the default) for general numbers that can be negative. You must write code to prevent overflow because the consequence is 
   dangerous Undefined Behavior.
-> Use an unsigned int only when you need a value that can never be negative (like an array index or a memory size) and you understand the wrap-around behavior.

//==========================================================================================
unsigned int x = UINT_MAX; // 4294967295 (for 32-bit)
x = x + 1; // Wraps to 0 — fine

int y = INT_MAX; // 2147483647
y = y + 1; // Undefined behavior — compiler error or weird output
//==========================================================================================







*Float and Double*

1. The Core Idea: Representing Fractional Numbers
The primary job of float and double is to store numbers that have a fractional part, like 3.14159 or -0.0025. Integers (int, char) can only store whole numbers.

A quick but vital point: There is no unsigned float or unsigned double. Floating-point numbers are always signed by definition.

2. Internal Storage: The "Scientific Notation" Blueprint
Computers store float and double using a standard called IEEE 754. The easiest way to understand this is to think of scientific notation.

Any number can be written as: Sign x Digits x 10^Exponent (e.g., - 6.022 x 10^23)

IEEE 754 stores numbers in a very similar binary format, splitting the bits into three parts:

1. Sign (1 bit): The simplest part. 0 for positive, 1 for negative.
2. Exponent (several bits): This determines the range of the number—how large or small it can be. It's like the ^23 part, controlling where the decimal point goes.
3. Mantissa / Fraction (the rest of the bits): This stores the actual digits of the number. It determines the precision.

The only real difference between float and double is how many bits they dedicate to the Exponent and Mantissa.

Feature     	    float (Single Precision)	      double (Double Precision)
Total Size	       4 bytes (32 bits)	            8 bytes (64 bits)
Sign Bits	        1 bit	                        1 bit
Exponent Bits	    8 bits	                       11 bits
Mantissa Bits	    23 bits	                      52 bits


3. What is Precision? (The Most Important Difference)
Precision simply means: "How many significant decimal digits can you trust?"

Because a double has more than twice the bits for its mantissa (52 vs. 23), it can store a number with far more accuracy.

Example: Storing the value of Pi.
-> A float might store it as 3.141592. You can only trust about 7 digits. The rest is lost.
-> A double can store it as 3.141592653589793. You can trust about 15-16 digits.

Rule of thumb for an intelligent developer: Always use double by default. Use float only when you have a very specific reason, such as:
-> You have a massive array with millions of numbers and memory usage is critical (common in graphics programming).
-> You are on hardware that has poor double performance.

4. Special Behaviors and "Overflow"
Floating-point numbers do not wrap around or cause Undefined Behavior like integers. They have their own special states for handling exceptional situations.

Overflow: If a number is too large to represent, it becomes Infinity (inf).
//==========================================================================================
double huge_num = 1.0e308;
huge_num = huge_num * 10; // Becomes 'inf'
std::cout << huge_num;    // Prints "inf"
//==========================================================================================

Division by Zero: This also results in Infinity.
//==========================================================================================
double result = 1.0 / 0.0; // result is 'inf'
//==========================================================================================

Invalid Operations: An operation with no valid mathematical answer results in Not a Number (NaN).
//==========================================================================================
double result1 = 0.0 / 0.0;        // result1 is 'nan'
double result2 = sqrt(-1.0);     // result2 is 'nan'
//==========================================================================================

5. The Golden Rule: Never Compare Floats with ==
Because of small precision errors, a number you think is 0.3 might actually be stored as 0.30000000000000004. Comparing it directly will fail.

BAD:
//==========================================================================================
double x = 0.1 + 0.2;
if (x == 0.3) { /* This will probably be FALSE! */ }
//==========================================================================================

GOOD:
Check if the numbers are "close enough."
//==========================================================================================
const double EPSILON = 0.000001;
if (std::abs(x - 0.3) < EPSILON) { /* This is TRUE */ }
//==========================================================================================

=> long double
There is also a long double type, which is platform-dependent but offers even more precision than a double (often 10 or 16 bytes). It's rarely used unless extreme numerical precision is required (e.g., in scientific or financial modeling).







*Bool*
Understanding bool
1. The Core Idea: Representing Truth
The bool data type is the simplest of all. Its only job is to store a truth value. It is the foundation of all decision-making in code (e.g., in if statements and while loops).

2. Possible Values
A bool can only hold one of two possible keyword values:
 - true
 - false

3. Internal Storage (The "Gotcha")
Logically, a bool only needs 1 bit (0 for false, 1 for true) to store its value.

However, a computer's memory is not typically addressable at the single-bit level. The smallest chunk of memory a CPU can easily work with is a byte.

Therefore, a bool almost always occupies 1 full byte (8 bits) in memory. The other 7 bits are simply unused (padded).

(The one major exception is std::vector<bool>, a special C++ container that does pack the booleans into individual bits to save space.)

4. The Critical C++ Behavior: Conversion to and from int
bool has a direct and important relationship with integers.

bool to int:
 - true converts to the integer 1.
 - false converts to the integer 0.
//==========================================================================================
int x = true;  // x is now 1
int y = false; // y is now 0
//==========================================================================================

int (or pointer) to bool: This is the most important rule to know.
 - The integer 0 converts to false.
 - Any non-zero integer (positive or negative) converts to true.
 - A nullptr converts to false; any valid pointer converts to true.
//==========================================================================================
bool b1 = 5;      // b1 is true
bool b2 = -100;   // b2 is true
bool b3 = 0;      // b3 is false
if (5) { /* this code runs */ }
//==========================================================================================

Practical Rules for the Intelligent Developer
1. Use bool for Clarity: If a function needs to return a success/failure state, have it return a bool. It makes the code's intent clear.
//==========================================================================================
bool didItWork = launchMissiles();
//==========================================================================================

2. Don't Compare Explicitly: The integer conversion rule makes explicit comparisons redundant and clunky.
 - BAD: if (didItWork == true)
 - GOOD: if (didItWork)
 - BAD: if (isFinished == false)
 - GOOD: if (!isFinished)

