Core Idea of a Memory Pool (Simplified):
1. Get a Big Chunk: At the start, grab one large piece of memory.
2. Hand Out Small Pieces: When someone asks for memory, give them a slice from your big chunk.
3. Fast Allocation: This is usually much faster than asking the operating system (new/malloc) for every small piece.


Minimalist Example: Bump Allocator Memory Pool:-
#include <iostream>
#include <vector>   // To hold the pre-allocated memory easily
#include <cstddef>  // For std::byte (raw memory type) and size_t
#include <new>      // For "placement new"

// --- Our Minimal Memory Pool ---
class MinimalPool {
private:
    std::vector<std::byte> m_storage;      // 1. The big chunk of memory
    size_t m_current_offset;               // 2. Where the next free piece starts

public:
    // Constructor: Get the big chunk
    MinimalPool(size_t total_size) : m_current_offset(0) {
        m_storage.resize(total_size); // Pre-allocate all memory now
        std::cout << "Pool: Created with " << total_size << " bytes." << std::endl;
    }

    // Allocate a small piece
    void* allocate(size_t requested_size) {
        // Is there enough space left in our big chunk?
        if (m_current_offset + requested_size > m_storage.size()) {
            std::cout << "Pool: Not enough memory to allocate " << requested_size << " bytes." << std::endl;
            return nullptr; // Out of memory
        }

        // Yes, there's space!
        // Get a pointer to the start of the next available piece
        void* ptr = &m_storage[m_current_offset];

        // "Bump" the offset forward by the size we just allocated
        m_current_offset += requested_size;

        std::cout << "Pool: Gave out " << requested_size << " bytes. "
                  << (m_storage.size() - m_current_offset) << " bytes remaining." << std::endl;
        return ptr;
    }

    // This simple pool doesn't free individual pieces.
    // Instead, we can "reset" the whole pool, making all its memory usable again.
    void reset() {
        m_current_offset = 0; // Just point back to the beginning
        std::cout << "Pool: Reset. All memory available again." << std::endl;
    }

    // Destructor: The std::vector m_storage will automatically free its memory
    ~MinimalPool() {
        std::cout << "Pool: Destroyed. Big chunk released." << std::endl;
    }

    // Make it non-copyable for simplicity
    MinimalPool(const MinimalPool&) = delete;
    MinimalPool& operator=(const MinimalPool&) = delete;
};

// --- Example Usage ---
struct SimpleData {
    int id;
    double value;

    SimpleData(int i, double v) : id(i), value(v) {
        std::cout << "  SimpleData(" << id << ", " << value << ") constructed at " << this << std::endl;
    }
    ~SimpleData() {
        std::cout << "  SimpleData(" << id << ", " << value << ") destructed at " << this << std::endl;
    }
};

int main() {
    std::cout << "--- Creating a pool of 100 bytes ---" << std::endl;
    MinimalPool my_pool(100);

    std::cout << "\n--- Allocating first object (size: " << sizeof(SimpleData) << ") ---" << std::endl;
    void* raw_mem1 = my_pool.allocate(sizeof(SimpleData));
    SimpleData* obj1 = nullptr;
    if (raw_mem1) {
        // We got raw memory. Now we need to construct an object there.
        // This is "placement new".
        obj1 = new (raw_mem1) SimpleData(1, 3.14);
    }

    std::cout << "\n--- Allocating second object (size: " << sizeof(SimpleData) << ") ---" << std::endl;
    void* raw_mem2 = my_pool.allocate(sizeof(SimpleData));
    SimpleData* obj2 = nullptr;
    if (raw_mem2) {
        obj2 = new (raw_mem2) SimpleData(2, 6.28);
    }

    std::cout << "\n--- Trying to allocate too much (e.g., 80 bytes) ---" << std::endl;
    void* too_big_mem = my_pool.allocate(80); // This should fail if not enough space
    if (!too_big_mem) {
        std::cout << "  Correctly failed to allocate 80 bytes." << std::endl;
    }

    // IMPORTANT: Before resetting or destroying the pool, if you constructed objects,
    // you MUST manually call their destructors. The pool only knows about raw memory.
    std::cout << "\n--- Manually destructing objects before reset ---" << std::endl;
    if (obj2) obj2->~SimpleData(); // Call destructor
    if (obj1) obj1->~SimpleData(); // Call destructor

    std::cout << "\n--- Resetting the pool ---" << std::endl;
    my_pool.reset();
    // Now obj1 and obj2 pointers are "dangling". Don't use them!
    // The memory they pointed to is considered free by the pool again.

    std::cout << "\n--- Allocating again after reset (size: " << sizeof(SimpleData) << ") ---" << std::endl;
    void* raw_mem3 = my_pool.allocate(sizeof(SimpleData));
    SimpleData* obj3 = nullptr;
    if (raw_mem3) {
        // This new object might get the same memory address as obj1 had!
        obj3 = new (raw_mem3) SimpleData(3, 9.42);
    }

    // Manually destruct the last object
    if (obj3) obj3->~SimpleData();

    std::cout << "\n--- Pool going out of scope ---" << std::endl;
    // my_pool destructor will be called.
    return 0;
}


problem: Difference between 'Our implmentation' and 'How actual industry code is written'
Ans:
1. Individual Deallocation: Industrial pools let you free specific memory blocks back for reuse; our simple one only mass-resets.
2. Thread Safety: Real-world pools often work safely with multiple threads; our example doesn't handle this.
3. Features & Robustness: Industrial pools add features like precise alignment, varied size handling, and error detection; ours is very basic.
4. Complexity: Real-world pools have more complex internal logic (like free lists) to manage memory efficiently; ours just "bumps" a pointer.
