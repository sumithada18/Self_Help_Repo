1.  For class members that are simple data types (like int, char, double) or C-style arrays, and structs/classes that don't manage external resources 
    (no raw pointers to heap memory they own), "moving" them is effectively the same as copying their value. std::move on the containing object casts 
    it to an rvalue reference, potentially enabling its move constructor. If a move constructor is indeed invoked for the containing object, its operation
    on these simple members will effectively be a bit-wise copy; this is because such members lack external resources to 'pilfer', so the compiler 
    correctly implements their 'move' as a value copy. A compiler-generated copy operation for these members also performs a member-wise copy.

2.  If a class directly manages dynamically allocated raw resources (e.g., via a raw pointer like int* data;), a compiler-generated copy constructor will perform 
    a shallow copy (copying only the pointer address, not the data it points to). To avoid issues like two objects pointing to and trying to manage the same heap memory, 
    a user-defined deep copy constructor is needed (which allocates new memory and copies the content). A user-defined destructor is then essential to release this 
    heap memory to prevent leaks.

3.  If you provide a user-defined destructor (or copy constructor, or copy assignment operator), the compiler will not automatically generate move 
    operations (move constructor and move assignment operator). Consequently, even if you use std::move(source_object) to indicate an intention to move, 
    the compiler will likely fall back to using the copy constructor if available (since a const T& can bind to an rvalue). If the copy constructor performs a 
    shallow copy (or if it's compiler-generated and thus shallow for raw pointers), you still get a shallow copy. Declaring a move constructor as = default in 
    a class with raw pointers will also result in a shallow copy for that pointer member (it copies the pointer address but crucially does not nullify 
    the source object's pointer), leading to potential double deletion. 

4.  To achieve true and safe move semantics for classes managing raw dynamically allocated resources, you must provide a user-defined move constructor (and move assignment 
    operator). The key responsibility of this custom move constructor is to "steal" the resource (e.g., copy the pointer value to the new object) and then modify the source 
    object to release its ownership of that resource (e.g., by setting its pointer to nullptr). This leaves the moved-from object in a valid, destructible (and usually
    empty) state.

5.  If a class is composed only of members that are themselves properly movable and manage their own resources correctly (like RAII types such as std::string, std::vector, 
    std::unique_ptr, or other well-behaved class types), then you often do not need to write custom copy/move operations or a custom destructor. The compiler-generated 
    versions will generally do the right thing by invoking the appropriate copy/move/destruct operations on these well-behaved members (this aligns with the "Rule of 
    Zero").


   ● Note:
○ The statement "=default for move operations is bad because it doesn't nullify the source" is true when the member in question is a raw resource handle (like a raw pointer) 
  for which a "default" member-wise move is just a copy of the handle's value, not a transfer of ownership that includes nullifying the source's handle.
○ The statement is false if all members are already self-managing (like std::string) or simple types, where their own move operations (or the nature of moving them) are 
  already correct.


=========================================================================================
    Move Constructor with std::string (Shallow vs Deep Move)
=========================================================================================
code:
#include <iostream>
#include <string>

class Test{
    public:
    std::string str;
    Test(std::string arg) : str(arg) {
        std::cout << "cons.. called\n";
    }
    // move constructor but copying
    // Test(Test&& other) : str(other.str){
    // }
    // actual move constructor
    Test(Test&& other) : str(std::move(other.str)){
        
    }
};

int main()
{
    Test t1("sumit");
    Test t2(std::move(t1));
    
    std::cout << "t2's str: " << t2.str << "\n";
    if(!t1.str.empty()){
    std::cout << t1.str << "\n";
    }
    else{
        std::cout << "t1's str is null\n";
    }
    return 0;
}

understanding:
When we do str(other.str), the expression other.str is an lvalue, so it invokes the copy constructor of std::string, copying the contents from other.str into str.

To move the contents instead, we use str(std::move(other.str)). Here, std::move casts other.str into an rvalue, triggering the move constructor of std::string. This transfers the internal resources (like heap-allocated memory) from other.str to str, leaving other.str in a valid but unspecified state.

This distinction matters because std::string, std::vector, and similar types are wrappers around raw data. We can’t "manually" move internal resources — instead, we rely on their move constructors, which are designed to efficiently transfer ownership of dynamic memory or internal buffers.

So, we don’t move the containers directly — we request them to move their contents by explicitly invoking their move constructors using std::move.
